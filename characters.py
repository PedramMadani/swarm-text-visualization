# Font data with hex values representing character shapes
import numpy as np

# Each character is represented by a list of hex values, where each hex value corresponds to a row of pixels.
# Each bit in the hex value (5 bits) represents an 'on' (1) or 'off' (0) pixel, creating a 5x7 grid for each character.
font_data = {
    # Hex values for each character, e.g., '!' is represented by 7 rows of binary patterns.
    ' ': [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
    '!': [0x04, 0x04, 0x04, 0x04, 0x04, 0x00, 0x04],
    '"': [0x09, 0x09, 0x12, 0x00, 0x00, 0x00, 0x00],
    '#': [0x0a, 0x0a, 0x1f, 0x0a, 0x1f, 0x0a, 0x0a],
    '$': [0x04, 0x0f, 0x14, 0x0e, 0x05, 0x1e, 0x04],
    '%': [0x19, 0x19, 0x02, 0x04, 0x08, 0x13, 0x13],
    '&': [0x04, 0x0a, 0x0a, 0x0a, 0x15, 0x12, 0x0d],
    "'": [0x04, 0x04, 0x08, 0x00, 0x00, 0x00, 0x00],
    '(': [0x02, 0x04, 0x08, 0x08, 0x08, 0x04, 0x02],
    ')': [0x08, 0x04, 0x02, 0x02, 0x02, 0x04, 0x08],
    '*': [0x04, 0x15, 0x0e, 0x1f, 0x0e, 0x15, 0x04],
    '+': [0x00, 0x04, 0x04, 0x1f, 0x04, 0x04, 0x00],
    ',': [0x00, 0x00, 0x00, 0x00, 0x04, 0x04, 0x08],
    '-': [0x00, 0x00, 0x00, 0x1f, 0x00, 0x00, 0x00],
    '.': [0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x0c],
    '/': [0x01, 0x01, 0x02, 0x04, 0x08, 0x10, 0x10],
    '0': [0x0e, 0x11, 0x13, 0x15, 0x19, 0x11, 0x0e],
    '1': [0x04, 0x0c, 0x04, 0x04, 0x04, 0x04, 0x0e],
    '2': [0x0e, 0x11, 0x01, 0x02, 0x04, 0x08, 0x1f],
    '3': [0x0e, 0x11, 0x01, 0x06, 0x01, 0x11, 0x0e],
    '4': [0x02, 0x06, 0x0a, 0x12, 0x1f, 0x02, 0x02],
    '5': [0x1f, 0x10, 0x1e, 0x01, 0x01, 0x11, 0x0e],
    '6': [0x06, 0x08, 0x10, 0x1e, 0x11, 0x11, 0x0e],
    '7': [0x1f, 0x01, 0x02, 0x04, 0x08, 0x08, 0x08],
    '8': [0x0e, 0x11, 0x11, 0x0e, 0x11, 0x11, 0x0e],
    '9': [0x0e, 0x11, 0x11, 0x0f, 0x01, 0x02, 0x0c],
    ':': [0x00, 0x0c, 0x0c, 0x00, 0x0c, 0x0c, 0x00],
    ';': [0x00, 0x0c, 0x0c, 0x00, 0x0c, 0x04, 0x08],
    '<': [0x02, 0x04, 0x08, 0x10, 0x08, 0x04, 0x02],
    '=': [0x00, 0x00, 0x1f, 0x00, 0x1f, 0x00, 0x00],
    '>': [0x08, 0x04, 0x02, 0x01, 0x02, 0x04, 0x08],
    '?': [0x0e, 0x11, 0x01, 0x02, 0x04, 0x00, 0x04],
    '@': [0x0e, 0x11, 0x17, 0x15, 0x17, 0x10, 0x0f],
    'A': [0x04, 0x0a, 0x11, 0x11, 0x1f, 0x11, 0x11],
    'B': [0x1e, 0x11, 0x11, 0x1e, 0x11, 0x11, 0x1e],
    'C': [0x0e, 0x11, 0x10, 0x10, 0x10, 0x11, 0x0e],
    'D': [0x1e, 0x09, 0x09, 0x09, 0x09, 0x09, 0x1e],
    'E': [0x1f, 0x10, 0x10, 0x1c, 0x10, 0x10, 0x1f],
    'F': [0x1f, 0x10, 0x10, 0x1f, 0x10, 0x10, 0x10],
    'G': [0x0e, 0x11, 0x10, 0x10, 0x13, 0x11, 0x0f],
    'H': [0x11, 0x11, 0x11, 0x1f, 0x11, 0x11, 0x11],
    'I': [0x0e, 0x04, 0x04, 0x04, 0x04, 0x04, 0x0e],
    'J': [0x1f, 0x02, 0x02, 0x02, 0x02, 0x12, 0x0c],
    'K': [0x11, 0x12, 0x14, 0x18, 0x14, 0x12, 0x11],
    'L': [0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x1f],
    'M': [0x11, 0x1b, 0x15, 0x11, 0x11, 0x11, 0x11],
    'N': [0x11, 0x11, 0x19, 0x15, 0x13, 0x11, 0x11],
    'O': [0x0e, 0x11, 0x11, 0x11, 0x11, 0x11, 0x0e],
    'P': [0x1e, 0x11, 0x11, 0x1e, 0x10, 0x10, 0x10],
    'Q': [0x0e, 0x11, 0x11, 0x11, 0x15, 0x12, 0x0d],
    'R': [0x1e, 0x11, 0x11, 0x1e, 0x14, 0x12, 0x11],
    'S': [0x0e, 0x11, 0x10, 0x0e, 0x01, 0x11, 0x0e],
    'T': [0x1f, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04],
    'U': [0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x0e],
    'V': [0x11, 0x11, 0x11, 0x11, 0x11, 0x0a, 0x04],
    'W': [0x11, 0x11, 0x11, 0x15, 0x15, 0x1b, 0x11],
    'X': [0x11, 0x11, 0x0a, 0x04, 0x0a, 0x11, 0x11],
    'Y': [0x11, 0x11, 0x0a, 0x04, 0x04, 0x04, 0x04],
    'Z': [0x1f, 0x01, 0x02, 0x04, 0x08, 0x10, 0x1f],
    '[': [0x0e, 0x08, 0x08, 0x08, 0x08, 0x08, 0x0e],
    '\\': [0x10, 0x10, 0x08, 0x04, 0x02, 0x01, 0x01],
    ']': [0x0e, 0x02, 0x02, 0x02, 0x02, 0x02, 0x0e],
    '^': [0x04, 0x0a, 0x11, 0x00, 0x00, 0x00, 0x00],
    '_': [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f],
    '`': [0x04, 0x04, 0x02, 0x00, 0x00, 0x00, 0x00],
    'a': [0x00, 0x0e, 0x01, 0x0d, 0x13, 0x13, 0x0d],
    'b': [0x10, 0x10, 0x10, 0x1c, 0x12, 0x12, 0x1c],
    'c': [0x00, 0x00, 0x00, 0x0e, 0x10, 0x10, 0x0e],
    'd': [0x01, 0x01, 0x01, 0x07, 0x09, 0x09, 0x07],
    'e': [0x00, 0x00, 0x0e, 0x11, 0x1f, 0x10, 0x0f],
    'f': [0x06, 0x09, 0x08, 0x1c, 0x08, 0x08, 0x08],
    'g': [0x0e, 0x11, 0x13, 0x0d, 0x01, 0x01, 0x0e],
    'h': [0x10, 0x10, 0x10, 0x16, 0x19, 0x11, 0x11],
    'i': [0x00, 0x04, 0x00, 0x0c, 0x04, 0x04, 0x0e],
    'j': [0x02, 0x00, 0x06, 0x02, 0x02, 0x12, 0x0c],
    'k': [0x10, 0x10, 0x12, 0x14, 0x18, 0x14, 0x12],
    'l': [0x0c, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04],
    'm': [0x00, 0x00, 0x0a, 0x15, 0x15, 0x11, 0x11],
    'n': [0x00, 0x00, 0x16, 0x19, 0x11, 0x11, 0x11],
    'o': [0x00, 0x00, 0x0e, 0x11, 0x11, 0x11, 0x0e],
    'p': [0x00, 0x1c, 0x12, 0x12, 0x1c, 0x10, 0x10],
    'q': [0x00, 0x07, 0x09, 0x09, 0x07, 0x01, 0x01],
    'r': [0x00, 0x00, 0x16, 0x19, 0x10, 0x10, 0x10],
    's': [0x00, 0x00, 0x0f, 0x10, 0x0e, 0x01, 0x1e],
    't': [0x08, 0x08, 0x1c, 0x08, 0x08, 0x09, 0x06],
    'u': [0x00, 0x00, 0x11, 0x11, 0x11, 0x13, 0x0d],
    'v': [0x00, 0x00, 0x11, 0x11, 0x11, 0x0a, 0x04],
    'w': [0x00, 0x00, 0x11, 0x11, 0x15, 0x15, 0x0a],
    'x': [0x00, 0x00, 0x11, 0x0a, 0x04, 0x0a, 0x11],
    'y': [0x00, 0x11, 0x11, 0x0f, 0x01, 0x11, 0x0e],
    'z': [0x00, 0x00, 0x1f, 0x02, 0x04, 0x08, 0x1f],
    '{': [0x06, 0x08, 0x08, 0x10, 0x08, 0x08, 0x06],
    '|': [0x04, 0x04, 0x04, 0x00, 0x04, 0x04, 0x04],
    '}': [0x0c, 0x02, 0x02, 0x01, 0x02, 0x02, 0x0c],
    '~': [0x08, 0x15, 0x02, 0x00, 0x00, 0x00, 0x00],
}


def hex_to_coordinates(hex_data):
    """
    Converts the hex-based font data to 2D coordinates for each character,
    where each (x, y) coordinate corresponds to an 'on' pixel.
    """
    coordinates = {}
    for char, pattern in hex_data.items():
        coords = []
        max_y = len(pattern) - 1
        for y, row in enumerate(pattern):
            corrected_y = max_y - y  # Invert y for correct orientation
            for x in range(5):  # Each row has 5 bits (columns)
                if row & (1 << (4 - x)):  # Check each bit position in the row
                    coords.append((x, corrected_y))
        coordinates[char] = coords
    return coordinates


def create_sentence(sentence):
    """
    Converts a sentence into a list of coordinates for each character,
    applying spacing between characters and words.
    """
    letter_spacing = 6  # Space between characters in a word
    word_spacing = 12   # Additional space between words
    sentence_data = []
    x_offset = 0  # Track horizontal offset for each new character

    # Process each word in the sentence
    for word in sentence.split():
        word_data = []
        for char in word:
            # Get coordinates for each character
            char_points = np.array(char_coordinates.get(char, []))
            if len(char_points) > 0:
                # Shift character horizontally by x_offset
                char_points[:, 0] += x_offset
                word_data.append(char_points)
                x_offset += letter_spacing  # Move to next character position

        # Combine word's character points into sentence data
        if word_data:
            sentence_data.append(np.vstack(word_data))

        x_offset += word_spacing  # Move to next word position

    # Compile all words' points into a single array and mirror vertically
    if sentence_data:
        all_points = np.vstack(sentence_data)
        max_y = all_points[:, 1].max()
        # Flip vertically for display
        all_points[:, 1] = max_y - all_points[:, 1]
        return all_points

    return np.array([])  # Return empty if no valid characters


# Map character hex data to coordinates
char_coordinates = hex_to_coordinates(font_data)
